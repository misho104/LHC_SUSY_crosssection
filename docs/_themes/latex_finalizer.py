#!env python3

import pathlib
import re
import sys

re_doubled_cite = re.compile(r"\\cite\{(.*?)\}\\cite\{(.*?)\}")


def finalize(text):
    text = re.sub(r"^\\autogeneratedwarning", "", text, flags=re.M)
    text = finalize_section_tt(text)
    text = finalize_index_tt(text)
    text = finalize_cite(text)
    return text


def finalize_cite(text):
    doubled_cite_match = re_doubled_cite.search(text)
    if doubled_cite_match:
        text = re_doubled_cite.sub(r"\\cite{\1,\2}", text)
        text = finalize_cite(text)
    return text


def finalize_section_tt(text):
    re_content_sub = re.compile(r"(susy\\_cross\\_section[^ ]*)")

    def sub(match):
        return "\\relax" + re_content_sub.sub(r"\\texttt{\1}", match.group(0))

    for t in ["section", "subsection", "subsubsection"]:
        regexp = r"^\\(" + t + r")\{.*\}"
        text = re.sub(regexp, sub, text, flags=re.M)

    return text


def finalize_index_tt(text):
    regexps = [
        [r"\A([^{]+)\(\) \(([^{]+) (class|static) method\)\Z",
         r"\\texttt{\1()} {\\color{darkgray}(\\texttt{\2} \3 method)}"],
        [r"\A([^{]+)\(\) \(([^{]+) method\)\Z",
         r"\\texttt{\1()} {\\color{darkgray}(\\texttt{\2} method)}"],
        [r"\A([^{]+) \(in module ([^{]+)\)\Z",
         r"\\texttt{\1} {\\color{darkgray}(in module \\texttt{\2})}"],
        [r"\A([^{]+) \(class in ([^{]+)\)\Z",
         r"\\texttt{\1} {\\color{darkgray}(class in \\texttt{\2})}"],
        [r"\A([^{]+) \(([^{]+) attribute\)\Z",
         r"\\texttt{\1} {\\color{darkgray}(\\texttt{\2} attribute)}"],
        [r"\A([^{]+) \(module\)\Z",
         r"\\texttt{\1} {\\color{darkgray}(module)}"],
    ]

    def sub(match):
        b = b0 = match.group(1)
        for exp, rep in regexps:
            b = re.sub(exp, rep, b)
        return "\\index{" + b0 + "@" + b + "}"

    return re.sub(r"\\index\{(.*?)\}", sub, text)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} [TEX_FILE]", file=sys.stderr)
        exit(1)

    target = pathlib.Path(sys.argv[1])
    text = target.read_text()
    target.write_text(finalize(text))
    exit(0)
